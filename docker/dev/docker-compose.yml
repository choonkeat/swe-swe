services:
  traefik:
  # Traefik reverse proxy with basic auth
    image: traefik:v3.0
    container_name: traefik
    command:
      - "--api.insecure=true"
      - "--providers.docker=true"
      - "--providers.docker.exposedbydefault=false"
      - "--providers.file.filename=/etc/traefik/dynamic.yml"
      - "--entrypoints.web.address=:7000"
    ports:
      - "7001:7000"
      - "7002:8080"  # Traefik dashboard
    volumes:
      - "/var/run/docker.sock:/var/run/docker.sock:ro"
      - "./traefik-dynamic.yml:/etc/traefik/dynamic.yml:ro"
    networks:
      - swe-swe-network

  # Service running swe-swe with claude CLI
  swe-swe-claude:
    build:
      context: ../..
      dockerfile: docker/dev/Dockerfile.claude
    container_name: swe-swe-claude
    command: ["-agent", "claude", "-host", "0.0.0.0", "-port", "7001"]
    labels:
      - "traefik.enable=true"
      - "traefik.http.routers.swe-claude.rule=HostRegexp(`swe-swe-claude\\..+`)"
      - "traefik.http.services.swe-claude.loadbalancer.server.port=7001"
      # - "traefik.http.routers.swe-claude.middlewares=auth@file" # uncomment for http basic protection
    volumes:
      # Mount current directory to /workspace in container
      - ${WORKSPACE_DIR:-../../helloworld}:/workspace
    working_dir: /workspace
    networks:
      - swe-swe-network
    environment:
      - AGENT_TYPE=claude
      - ANTHROPIC_API_KEY=${ANTHROPIC_API_KEY}

  # Service running swe-swe with goose CLI
  swe-swe-goose:
    build:
      context: ../..
      dockerfile: docker/dev/Dockerfile.goose
    container_name: swe-swe-goose
    command: ["-agent", "goose", "-host", "0.0.0.0", "-port", "7002"]
    labels:
      - "traefik.enable=true"
      - "traefik.http.routers.swe-goose.rule=HostRegexp(`swe-swe-goose\\..+`)"
      - "traefik.http.services.swe-goose.loadbalancer.server.port=7002"
      # - "traefik.http.routers.swe-goose.middlewares=auth@file" # uncomment for http basic protection
    volumes:
      # Mount current directory to /workspace in container
      - ${WORKSPACE_DIR:-../../helloworld}:/workspace
    working_dir: /workspace
    networks:
      - swe-swe-network
    environment:
      - GOOSE_DISABLE_KEYRING=true
      - GOOSE_PROVIDER=anthropic
      - GOOSE_MODEL=claude-3-5-sonnet-20241022
      - GOOSE_PROVIDER__API_KEY=${ANTHROPIC_API_KEY}
      - ANTHROPIC_API_KEY=${ANTHROPIC_API_KEY}

  # Service running native goose web
  goose:
    build:
      context: ../..
      dockerfile: docker/dev/Dockerfile.goose-web
    container_name: goose
    labels:
      - "traefik.enable=true"
      - "traefik.http.routers.goose.rule=HostRegexp(`goose\\..+`)"
      - "traefik.http.services.goose.loadbalancer.server.port=9000"
      # - "traefik.http.routers.goose.middlewares=auth@file" # uncomment for http basic protection
    volumes:
      # Mount current directory to /workspace in container
      - ${WORKSPACE_DIR:-../../helloworld}:/workspace
    working_dir: /workspace
    networks:
      - swe-swe-network
    environment:
      - GOOSE_DISABLE_KEYRING=true
      - GOOSE_PROVIDER=anthropic
      - GOOSE_MODEL=claude-3-5-sonnet-20241022
      - GOOSE_PROVIDER__API_KEY=${ANTHROPIC_API_KEY}
      - ANTHROPIC_API_KEY=${ANTHROPIC_API_KEY}

  # Service running claude-code-webui
  claude-code-webui:
    build:
      context: ../..
      dockerfile: docker/dev/Dockerfile.claude-code-webui
    container_name: claude-code-webui
    labels:
      - "traefik.enable=true"
      - "traefik.http.routers.claude-webui.rule=HostRegexp(`claude-code-webui\\..+`)"
      - "traefik.http.services.claude-webui.loadbalancer.server.port=8080"
      # - "traefik.http.routers.claude-webui.middlewares=auth@file" # uncomment for http basic protection
    volumes:
      # Mount current directory to /workspace in container
      - ${WORKSPACE_DIR:-../../helloworld}:/workspace
    working_dir: /workspace
    networks:
      - swe-swe-network
    environment:
      - ANTHROPIC_API_KEY=${ANTHROPIC_API_KEY}

  # Service running claudia
  claudia:
    build:
      context: ../..
      dockerfile: docker/dev/Dockerfile.claudia
    container_name: claudia
    labels:
      - "traefik.enable=true"
      - "traefik.http.routers.claudia.rule=HostRegexp(`claudia\\..+`)"
      - "traefik.http.services.claudia.loadbalancer.server.port=4173"
      # - "traefik.http.routers.claudia.middlewares=auth@file" # uncomment for http basic protection
    volumes:
      # Mount current directory to /workspace in container
      - ${WORKSPACE_DIR:-../../helloworld}:/workspace
    working_dir: /workspace
    networks:
      - swe-swe-network
    environment:
      - ANTHROPIC_API_KEY=${ANTHROPIC_API_KEY}

  # VSCode web service
  vscode:
    build:
      context: ../..
      dockerfile: docker/dev/Dockerfile.vscode
    container_name: vscode
    restart: unless-stopped
    labels:
      - "traefik.enable=true"
      - "traefik.http.routers.vscode.rule=HostRegexp(`vscode\\..+`)"
      - "traefik.http.services.vscode.loadbalancer.server.port=8080"
      # - "traefik.http.routers.vscode.middlewares=auth@file" # uncomment for http basic protection
    volumes:
      # Mount project directory
      - ${WORKSPACE_DIR:-../../helloworld}:/home/coder/project
      # VSCode configuration persistence
      - ./vscode-data/.config:/home/coder/.config
      - ./vscode-data/.local:/home/coder/.local
    working_dir: /home/coder/project
    networks:
      - swe-swe-network
    environment:
      - PASSWORD=${VSCODE_PASSWORD:-changeme}
      - TZ=${TZ:-UTC}
    deploy:
      resources:
        limits:
          cpus: '2'
          memory: 2G
        reservations:
          cpus: '1'
          memory: 1G

  # example Hello World Node.js app with hot reload
  # aka the app that we are vibe coding on
  helloworld:
    build:
      context: ../../helloworld
      dockerfile: Dockerfile
    container_name: helloworld
    labels:
      - "traefik.enable=true"
      - "traefik.http.routers.helloworld.rule=HostRegexp(`helloworld\\..+`)"
      - "traefik.http.services.helloworld.loadbalancer.server.port=3000"
    volumes:
      # Mount helloworld directory for hot reload
      - ../../helloworld:/app
      - /app/node_modules
    working_dir: /app
    networks:
      - swe-swe-network
    environment:
      - NODE_ENV=development
      - PORT=3000

networks:
  swe-swe-network:
    driver: bridge
